# -*- coding: utf-8 -*-
"""BERTFinetuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12zB03jZymoQJdve8D9kxqNTBui407o8e
"""

import pandas as pd
import numpy as np
import ast
import chardet
import matplotlib.pyplot as plt
#for pytorch
import torch
import torch.nn as nn
import transformers
from transformers import AutoModel, BertTokenizerFast
from sklearn.model_selection import train_test_split
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from transformers import AdamW
from sklearn.utils.class_weight import compute_class_weight
from sklearn.metrics import classification_report

def sentiment_analysis(start_date, end_date):
    device = torch.device("cpu")

    # import BERT-base pretrained model
    bert = AutoModel.from_pretrained('bert-base-uncased')

    # Load the BERT tokenizer
    tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')

    pad_len = 30

    train_labels, train_dataloader, val_dataloader, test_seq, test_mask, test_y = prepare_data(tokenizer, pad_len)

    # freeze the BERT architecture
    for param in bert.parameters():
        param.requires_grad = False

    # pass the pre-trained BERT to our define architecture
    global model
    model = BERT_architecture(bert)
    # push the model to GPU
    model = model.to(device)

    # define the optimizer
    optimizer = AdamW(model.parameters(), lr=1e-5)  # learning rate

    # compute the class weights
    class_weights = compute_class_weight(class_weight="balanced",
                                         classes=np.unique(train_labels),
                                         y=train_labels
                                         )
    print("class weights are {} for {}".format(class_weights, np.unique(train_labels)))

    # wrap class weights in tensor
    weights = torch.tensor(class_weights, dtype=torch.float)

    # push weights to GPU
    weights = weights.to(device)

    # define loss function
    # add weights to handle the "imbalance" in the dataset
    cross_entropy = nn.NLLLoss(weight=weights)

    # number of training epochs
    epochs = 10

    fine_tune_model(epochs, device, cross_entropy, optimizer, train_dataloader, val_dataloader)

    test_model(device, test_seq, test_mask, test_y)

    predict_tesla_headlines(tokenizer, pad_len, device, start_date, end_date)

class BERT_architecture(nn.Module):

    def __init__(self, bert):

      super(BERT_architecture, self).__init__()

      self.bert = bert

      # dropout layer
      self.dropout = nn.Dropout(0.2)

      # relu activation function
      self.relu =  nn.ReLU()

      # dense layer 1
      self.fc1 = nn.Linear(768,512)

      # dense layer 2 (Output layer)
      self.fc2 = nn.Linear(512,5)

      #softmax activation function
      self.softmax = nn.LogSoftmax(dim=1)

    #define the forward pass
    def forward(self, sent_id, mask):

      #pass the inputs to the model
      _, cls_hs = self.bert(sent_id, attention_mask=mask, return_dict=False)

      x = self.fc1(cls_hs)

      x = self.relu(x)

      x = self.dropout(x)

      # output layer
      x = self.fc2(x)

      # apply softmax activation
      x = self.softmax(x)

      return x

def prepare_data(tokenizer, pad_len):
    df = pd.read_csv('./sentiment-data/guardian_sentiment.csv', encoding='utf-8', header=None)
    # Select 'Headlines' and 'Sentiment' columns and rename them to 'Sentence' and 'Label'
    df = df.iloc[1:,-2:]

    # Assuming df is your DataFrame
    df.columns = ['sentence', 'label']
    # Subtract 1 from each row in the 'label' column
    df['label'] = df['label'].astype(int) - 1

    # split into train, validation and test sets in the ration 70 : 15 : 15
    train_text, temp_text, train_labels, temp_labels = train_test_split(df['sentence'], df['label'].astype(int),
                                                                        random_state=2021,
                                                                        test_size=0.3,
                                                                        stratify=df['label'])


    val_text, test_text, val_labels, test_labels = train_test_split(temp_text, temp_labels,
                                                                    random_state=2021,
                                                                    test_size=0.5,
                                                                    stratify=temp_labels)

    # tokenize and encode sequences
    tokens_train = tokenizer.batch_encode_plus(
        train_text.tolist(),
        max_length=pad_len,
        pad_to_max_length=True,
        truncation=True
    )

    tokens_val = tokenizer.batch_encode_plus(
        val_text.tolist(),
        max_length=pad_len,
        pad_to_max_length=True,
        truncation=True
    )

    tokens_test = tokenizer.batch_encode_plus(
        test_text.tolist(),
        max_length=pad_len,
        pad_to_max_length=True,
        truncation=True
    )

    train_seq = torch.tensor(tokens_train['input_ids'])
    train_mask = torch.tensor(tokens_train['attention_mask'])
    train_y = torch.tensor(train_labels.tolist())

    val_seq = torch.tensor(tokens_val['input_ids'])
    val_mask = torch.tensor(tokens_val['attention_mask'])
    val_y = torch.tensor(val_labels.tolist())

    test_seq = torch.tensor(tokens_test['input_ids'])
    test_mask = torch.tensor(tokens_test['attention_mask'])
    test_y = torch.tensor(test_labels.tolist())

    # define a batch size
    batch_size = 64

    # wrap tensors
    train_data = TensorDataset(train_seq, train_mask, train_y)

    # sampler for sampling the data during training
    train_sampler = RandomSampler(train_data)

    # dataLoader for train set
    train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

    # wrap tensors
    val_data = TensorDataset(val_seq, val_mask, val_y)

    # sampler for sampling the data during training
    val_sampler = SequentialSampler(val_data)

    # dataLoader for validation set
    val_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)

    return train_labels, train_dataloader, val_dataloader, test_seq, test_mask, test_y

# function to train the model
def train(train_dataloader, device, cross_entropy, optimizer):

    model.train()

    total_loss, total_accuracy = 0, 0

    # empty list to save model predictions
    total_preds = []

    # iterate over batches
    for step, batch in enumerate(train_dataloader):
        # progress update after every 50 batches.
        if step % 50 == 0 and not step == 0:
            print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(train_dataloader)))

        # push the batch to gpu
        batch = [r.to(device) for r in batch]

        sent_id, mask, labels = batch

        # clear previously calculated gradients
        model.zero_grad()

        # get model predictions for the current batch
        preds = model(sent_id, mask)

        # compute the loss between actual and predicted values
        loss = cross_entropy(preds, labels)

        # add on to the total loss
        total_loss = total_loss + loss.item()

        # backward pass to calculate the gradients
        loss.backward()

        # clip the the gradients to 1.0. It helps in preventing the exploding gradient problem
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

        # update parameters
        optimizer.step()

        # model predictions are stored on GPU. So, push it to CPU
        preds = preds.detach().cpu().numpy()

        # append the model predictions
        total_preds.append(preds)

    # compute the training loss of the epoch
    avg_loss = total_loss / len(train_dataloader)

    # predictions are in the form of (no. of batches, size of batch, no. of classes).
    # reshape the predictions in form of (number of samples, no. of classes)
    total_preds = np.concatenate(total_preds, axis=0)

    # returns the loss and predictions
    return avg_loss, total_preds

# function for evaluating the model
def evaluate(val_dataloader, device, cross_entropy):

    print("\nEvaluating...")

    # deactivate dropout layers
    model.eval()

    total_loss, total_accuracy = 0, 0

    # empty list to save the model predictions
    total_preds = []

    # iterate over batches
    for step, batch in enumerate(val_dataloader):

        # Progress update every 50 batches.
        if step % 50 == 0 and not step == 0:
            # # Calculate elapsed time in minutes.
            # elapsed = format_time(time.time() - t0)

            # Report progress.
            print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(val_dataloader)))

        # push the batch to gpu
        batch = [t.to(device) for t in batch]

        sent_id, mask, labels = batch

        # deactivate autograd
        with torch.no_grad():

            # model predictions
            preds = model(sent_id, mask)

            # compute the validation loss between actual and predicted values
            loss = cross_entropy(preds, labels)

            total_loss = total_loss + loss.item()

            preds = preds.detach().cpu().numpy()

            total_preds.append(preds)

    # compute the validation loss of the epoch
    avg_loss = total_loss / len(val_dataloader)

    # reshape the predictions in form of (number of samples, no. of classes)
    total_preds = np.concatenate(total_preds, axis=0)

    return avg_loss, total_preds

def fine_tune_model(epochs, device, cross_entropy, optimizer, train_dataloader, val_dataloader):
    # fine tune model
    # set initial loss to infinite
    best_valid_loss = float('inf')

    # empty lists to store training and validation loss of each epoch
    train_losses = []
    valid_losses = []

    # for each epoch
    for epoch in range(epochs):

        print('\n Epoch {:} / {:}'.format(epoch + 1, epochs))

        # train model
        train_loss, _ = train(train_dataloader, device, cross_entropy, optimizer)

        # evaluate model
        valid_loss, _ = evaluate(val_dataloader, device, cross_entropy)

        # save the best model
        if valid_loss < best_valid_loss:
            best_valid_loss = valid_loss
            torch.save(model.state_dict(), 'saved_weights.pt')

        # append training and validation loss
        train_losses.append(train_loss)
        valid_losses.append(valid_loss)

        print('\nTraining Loss: {}'.format(train_loss))
        print('Validation Loss: {}'.format(valid_loss))

    # load weights of best model
    path = 'saved_weights.pt'
    model.load_state_dict(torch.load(path))

def test_model(device, test_seq, test_mask, test_y):
    # get predictions for test data
    with torch.no_grad():
        preds = model(test_seq.to(device), test_mask.to(device))
        preds = preds.detach().cpu().numpy()

    pred = np.argmax(preds, axis=1)
    print(classification_report(test_y, pred))

def predict_tesla_headlines(tokenizer, pad_len, device, start_date, end_date):
    df_headlines = pd.read_csv(f'./headlines/tesla_headlines_{start_date[:4]}_{end_date[:4]}.csv')
    df_headlines.head(10)

    # Create an empty list to store predictions
    predictions = []

    # Loop through every article in the DataFrame
    for articles in df_headlines['articles']:
        # Tokenize and encode the article
        tokens_test = tokenizer.encode_plus(
            articles,
            max_length=pad_len,
            pad_to_max_length=True,
            truncation=True
        )

        # Convert inputs to tensors
        test_seq = torch.tensor([tokens_test['input_ids']])
        test_mask = torch.tensor([tokens_test['attention_mask']])

        # Get predictions for the article
        with torch.no_grad():
            preds = model(test_seq.to(device), test_mask.to(device))
            preds = preds.detach().cpu().numpy()

        pred = np.argmax(preds, axis=1)

        # Append the prediction to the list
        predictions.append(pred[0])

    print(len(predictions))
    # Add predictions as a new column in the DataFrame
    df_headlines['predictions'] = predictions
    df_headlines.to_csv('./tesla-sentiment-result/tesla-headlines-2017-2020-final.csv', index=False)
    print(df_headlines)

